// eslint-disable-next-line @typescript-eslint/no-var-requires
const { packages } = require("./packages/packages.json");

/* eslint-disable max-len */
// eslint-disable-next-line @typescript-eslint/no-var-requires
const utils = require("nps-utils");

const getSeries = (args) => utils.series.nps(...args);
const getConcurrent = (args) => utils.concurrent.nps(...args);

const getScripts = (packages) => {
  const getScript = (package, command) => {
    return package
      ? `npx lerna run ${command} --scope @${package.scope}/${package.name}`
      : getSeries(packages.map((pkg) => `${command}.@${pkg.scope}/${pkg.name} --config=./scripts-packages.js`))
          .split('packages.js"') // need to remove " symbols from commands generated by 'concurrent' command
          .join("packages.js")
          .split('packages.js"') // twice for windows %)
          .join("packages.js")
          .split('nps "')
          .join("nps ")
          .split('nps "')
          .join("nps ");
  };

  const getConcurrentScript = (package, command) => {
    return package
      ? `npx lerna run ${command} --scope @${package.scope}/${package.name}`
      : getConcurrent(packages.map((pkg) => `${command}.@${pkg.scope}/${pkg.name} --config=./scripts-packages.js`))
          .split('packages.js"') // need to remove " symbols from commands generated by 'concurrent' command
          .join("packages.js")
          .split('packages.js"') // twice for windows %)
          .join("packages.js")
          .split('nps "')
          .join("nps ")
          .split('nps "')
          .join("nps ");
  };

  const getRebuildCmd = (package) => {
    return package
      ? `${getScript(package, "clean")} && ${getScript(package, "build")}`
      : getSeries(packages.map((pkg) => `rebuild.@${pkg.scope}/${pkg.name} --config=./scripts-packages.js`))
          .split('packages.js"') // need to remove " symbols from commands generated by 'concurrent' command
          .join("packages.js")
          .split('packages.js"') // twice for windows %)
          .join("packages.js")
          .split('nps "')
          .join("nps ")
          .split('nps "')
          .join("nps ");
  };

  const setRebuild = () =>
    packages.reduce((a, c) => ({ ...a, [`@${c.scope}/${c.name}`]: getRebuildCmd(c) }), {
      default: getRebuildCmd(),
    });

  const setCommand = (command) =>
    packages.reduce((a, c) => ({ ...a, [`@${c.scope}/${c.name}`]: getScript(c, command) }), {
      default: getScript(undefined, command),
    });
  const setConcurrentCommand = (command) =>
    packages.reduce((a, c) => ({ ...a, [`@${c.scope}/${c.name}`]: getConcurrentScript(c, command) }), {
      default: getConcurrentScript(undefined, command),
    });

  return { setCommand, setRebuild, setConcurrentCommand };
};

module.exports = ((packages) => {
  const { setCommand, setRebuild, setConcurrentCommand } = getScripts(packages);

  return {
    scripts: {
      build: setCommand("build"),
      clean: setCommand("clean"),
      rebuild: setRebuild(),
      lint: setConcurrentCommand("lint"),
      "lint:fix": setConcurrentCommand("lint:fix"),
    },
  };
})(packages);
