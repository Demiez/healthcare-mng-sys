{"version":3,"file":"express-error-handler.js","sourceRoot":"","sources":["../../src/express/express-error-handler.ts"],"names":[],"mappings":";;;AACA,sCAA8E;AAE9E,SAAgB,qBAAqB,CACnC,GAAY,EACZ,MAAqC;IAErC,GAAG,CAAC,GAAG,CACL,CAAC,KAAoB,EAAE,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;QACxE,MAAM,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,KAAK,KAAK,CAAC,OAAO,KAAK,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC;QAC/D,IAAI,KAAK,CAAC,IAAI,KAAK,2BAAkB,CAAC,YAAY,EAAE;YAClD,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACpC;QAED,IAAI,KAAK,CAAC,IAAI,KAAK,2BAAkB,CAAC,SAAS,EAAE;YAC/C,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACpC;QAED,IAAI,KAAK,CAAC,IAAI,KAAK,2BAAkB,CAAC,SAAS,EAAE;YAC/C,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACpC;QAED,IAAI,KAAK,CAAC,IAAI,KAAK,2BAAkB,CAAC,qBAAqB,EAAE;YAC3D,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACpC;QACD,OAAO,GAAG;aACP,MAAM,CAAC,GAAG,CAAC;aACX,IAAI,CACH,IAAI,sBAAa,CAAC,uBAAc,CAAC,qBAAqB,EAAE;YACtD,EAAE,OAAO,EAAE,KAAK,EAAE;SACnB,CAAC,CACH,CAAC;IACN,CAAC,CACF,CAAC;AACJ,CAAC;AA/BD,sDA+BC","sourcesContent":["import { Express, Response, Request, NextFunction } from \"express\";\r\nimport { ErrorResponse, BaseErrorCodes, ErrorResponseTypes } from \"../errors\";\r\n\r\nexport function registerErrorsHandler(\r\n  app: Express,\r\n  logger: { error: (err: any) => void },\r\n) {\r\n  app.use(\r\n    (error: ErrorResponse, req: Request, res: Response, next: NextFunction) => {\r\n      logger.error(`${req.url}\\n${error.message}\\n${error.stack}\\n`);\r\n      if (error.type === ErrorResponseTypes.UNAUTHORIZED) {\r\n        return res.status(401).json(error);\r\n      }\r\n\r\n      if (error.type === ErrorResponseTypes.FORBIDDEN) {\r\n        return res.status(403).send(error);\r\n      }\r\n\r\n      if (error.type === ErrorResponseTypes.NOT_FOUND) {\r\n        return res.status(404).send(error);\r\n      }\r\n\r\n      if (error.type === ErrorResponseTypes.INTERNAL_SERVER_ERROR) {\r\n        return res.status(500).send(error);\r\n      }\r\n      return res\r\n        .status(500)\r\n        .send(\r\n          new ErrorResponse(BaseErrorCodes.INTERNAL_SERVER_ERROR, [\r\n            { message: error },\r\n          ]),\r\n        );\r\n    },\r\n  );\r\n}\r\n"]}