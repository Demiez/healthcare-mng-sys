{"version":3,"file":"nest-error.filter.js","sourceRoot":"","sources":["../../src/nest/nest-error.filter.ts"],"names":[],"mappings":";;;AAAA,2CAA4E;AAC5E,+BAA+B;AAC/B,sCAA+C;AAE/C,MAAa,eAAe;IAC1B,KAAK,CAAC,SAAc,EAAE,IAAmB;QACvC,MAAM,GAAG,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QAChC,MAAM,QAAQ,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;QAEnC,IAAI,UAAU,GAAG,mBAAU,CAAC,qBAAqB,CAAC;QAClD,IAAI,KAAK,qBAAQ,SAAS,CAAE,CAAC;QAC7B,IAAI,cAAO,CAAC,SAAS,CAAC,EAAE;YACtB,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC;SACrB;QACD,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE;YACf,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,mBAAU,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC;gBAC3D,CAAC,CAAC,KAAK,CAAC,MAAM;gBACd,CAAC,CAAC,mBAAU,CAAC,qBAAqB,CAAC;SACtC;QAED,QAAQ,KAAK,CAAC,IAAI,EAAE;YAClB,KAAK,2BAAkB,CAAC,YAAY,CAAC,CAAC;gBACpC,UAAU,GAAG,mBAAU,CAAC,YAAY,CAAC;gBACrC,MAAM;aACP;YACD,KAAK,2BAAkB,CAAC,SAAS,CAAC,CAAC;gBACjC,UAAU,GAAG,mBAAU,CAAC,SAAS,CAAC;gBAClC,MAAM;aACP;YACD,KAAK,2BAAkB,CAAC,SAAS,CAAC,CAAC;gBACjC,UAAU,GAAG,mBAAU,CAAC,SAAS,CAAC;gBAClC,MAAM;aACP;YACD,KAAK,2BAAkB,CAAC,qBAAqB,CAAC,CAAC;gBAC7C,UAAU,GAAG,mBAAU,CAAC,qBAAqB,CAAC;gBAC9C,MAAM;aACP;YACD;gBACE,UAAU,GAAG,mBAAU,CAAC,qBAAqB,CAAC;SACjD;QAED,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IAC1D,CAAC;CACF;AAvCD,0CAuCC","sourcesContent":["import { ArgumentsHost, ExceptionFilter, HttpStatus } from \"@nestjs/common\";\r\nimport { isArray } from \"util\";\r\nimport { ErrorResponseTypes } from \"../errors\";\r\n\r\nexport class NestErrorFilter implements ExceptionFilter {\r\n  catch(exception: any, host: ArgumentsHost) {\r\n    const ctx = host.switchToHttp();\r\n    const response = ctx.getResponse();\r\n\r\n    let statusCode = HttpStatus.INTERNAL_SERVER_ERROR;\r\n    let error = { ...exception };\r\n    if (isArray(exception)) {\r\n      [error] = exception;\r\n    }\r\n    if (!error.type) {\r\n      statusCode = Object.values(HttpStatus).includes(error.status)\r\n        ? error.status\r\n        : HttpStatus.INTERNAL_SERVER_ERROR;\r\n    }\r\n\r\n    switch (error.type) {\r\n      case ErrorResponseTypes.UNAUTHORIZED: {\r\n        statusCode = HttpStatus.UNAUTHORIZED;\r\n        break;\r\n      }\r\n      case ErrorResponseTypes.FORBIDDEN: {\r\n        statusCode = HttpStatus.FORBIDDEN;\r\n        break;\r\n      }\r\n      case ErrorResponseTypes.NOT_FOUND: {\r\n        statusCode = HttpStatus.NOT_FOUND;\r\n        break;\r\n      }\r\n      case ErrorResponseTypes.INTERNAL_SERVER_ERROR: {\r\n        statusCode = HttpStatus.INTERNAL_SERVER_ERROR;\r\n        break;\r\n      }\r\n      default:\r\n        statusCode = HttpStatus.INTERNAL_SERVER_ERROR;\r\n    }\r\n\r\n    response.status(statusCode).send(JSON.stringify(error));\r\n  }\r\n}\r\n"]}