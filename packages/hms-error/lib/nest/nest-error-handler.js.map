{"version":3,"file":"nest-error-handler.js","sourceRoot":"","sources":["../../src/nest/nest-error-handler.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAMwB;AACxB,uCAAmD;AACnD,sCAA+C;AAE/C;;GAEG;AAEH,IAAa,mBAAmB,GAAhC,MAAa,mBAAoB,SAAQ,0BAAmB;IAC1D,YAAuC,cAA0B;QAC/D,KAAK,CAAC,cAAc,CAAC,CAAC;IACxB,CAAC;IAED,KAAK,CAAC,SAAc,EAAE,IAAmB;QACvC,MAAM,GAAG,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QAChC,MAAM,QAAQ,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;QACnC,MAAM,OAAO,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;QAEjC,MAAM,YAAY,GAAG,GAAG,SAAS,CAAC,OAAO,KAAK,SAAS,CAAC,YAAY,EAAE,CAAC;QACvE,IAAI,UAAU,GAAG,mBAAU,CAAC,qBAAqB,CAAC;QAElD,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE;YACnB,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,mBAAU,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC;gBAC/D,CAAC,CAAC,SAAS,CAAC,MAAM;gBAClB,CAAC,CAAC,mBAAU,CAAC,qBAAqB,CAAC;SACtC;QAED,QAAQ,SAAS,CAAC,IAAI,EAAE;YACtB,KAAK,2BAAkB,CAAC,YAAY,CAAC,CAAC;gBACpC,UAAU,GAAG,mBAAU,CAAC,YAAY,CAAC;gBACrC,MAAM;aACP;YACD,KAAK,2BAAkB,CAAC,qBAAqB,CAAC,CAAC;gBAC7C,UAAU,GAAG,mBAAU,CAAC,qBAAqB,CAAC;gBAC9C,MAAM;aACP;YACD;gBACE,UAAU,GAAG,mBAAU,CAAC,qBAAqB,CAAC;SACjD;QAED,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC;YAC/B,YAAY;YACZ,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACnC,IAAI,EAAE,OAAO,CAAC,GAAG;SAClB,CAAC,CAAC;IACL,CAAC;CACF,CAAA;AAtCY,mBAAmB;IAD/B,cAAK,EAAE;IAEO,WAAA,eAAM,CAAC,iBAAiB,CAAC,CAAA;;GAD3B,mBAAmB,CAsC/B;AAtCY,kDAAmB","sourcesContent":["import {\r\n  Catch,\r\n  ArgumentsHost,\r\n  HttpServer,\r\n  Inject,\r\n  HttpStatus,\r\n} from \"@nestjs/common\";\r\nimport { BaseExceptionFilter } from \"@nestjs/core\";\r\nimport { ErrorResponseTypes } from \"../errors\";\r\n\r\n/**\r\n * DEPRECATED use NestErrorFilter instead\r\n */\r\n@Catch()\r\nexport class AllExceptionsFilter extends BaseExceptionFilter {\r\n  constructor(@Inject(\"HTTP_SERVER_REF\") applicationRef: HttpServer) {\r\n    super(applicationRef);\r\n  }\r\n\r\n  catch(exception: any, host: ArgumentsHost) {\r\n    const ctx = host.switchToHttp();\r\n    const response = ctx.getResponse();\r\n    const request = ctx.getRequest();\r\n\r\n    const errorMessage = `${exception.message}: ${exception.errorDetails}`;\r\n    let statusCode = HttpStatus.INTERNAL_SERVER_ERROR;\r\n\r\n    if (!exception.type) {\r\n      statusCode = Object.values(HttpStatus).includes(exception.status)\r\n        ? exception.status\r\n        : HttpStatus.INTERNAL_SERVER_ERROR;\r\n    }\r\n\r\n    switch (exception.type) {\r\n      case ErrorResponseTypes.UNAUTHORIZED: {\r\n        statusCode = HttpStatus.UNAUTHORIZED;\r\n        break;\r\n      }\r\n      case ErrorResponseTypes.INTERNAL_SERVER_ERROR: {\r\n        statusCode = HttpStatus.INTERNAL_SERVER_ERROR;\r\n        break;\r\n      }\r\n      default:\r\n        statusCode = HttpStatus.INTERNAL_SERVER_ERROR;\r\n    }\r\n\r\n    response.status(statusCode).json({\r\n      errorMessage,\r\n      timestamp: new Date().toISOString(),\r\n      path: request.url,\r\n    });\r\n  }\r\n}\r\n"]}