{"version":3,"file":"data-validation.pipe.js","sourceRoot":"","sources":["../../src/nest/data-validation.pipe.ts"],"names":[],"mappings":";;;AAAA,2CAIwB;AACxB,sCAA0D;AAE1D,MAAa,kBAAmB,SAAQ,uBAAc;IACpD,YAAY,OAA+B;QACzC,MAAM,UAAU,GAAG,OAAO,IAAI,EAAE,CAAC;QACjC,IAAI,CAAC,UAAU,CAAC,gBAAgB,EAAE;YAChC,UAAU,CAAC,gBAAgB,GAAG,kBAAkB,CAAC,uBAAuB,CAAC;SAC1E;QACD,IAAI,UAAU,CAAC,SAAS,KAAK,SAAS,EAAE;YACtC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC;SAC7B;QACD,KAAK,CAAC,UAAU,CAAC,CAAC;IACpB,CAAC;IAED,MAAM,CAAC,uBAAuB,CAAC,MAAyB;QACtD,IAAI,MAAM,IAAI,MAAM,CAAC,MAAM,EAAE;YAC3B,MAAM,MAAM,GAAG,MAAM;iBAClB,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CACT,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;gBACtC,QAAQ,IAAI,EAAE;oBACZ,KAAK,WAAW,CAAC;oBACjB,KAAK,YAAY;wBACf,OAAO,IAAI,uBAAc,CACvB,sBAAa,CAAC,gCAAgC,EAC9C,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAClC,CAAC;oBAEJ,KAAK,UAAU,CAAC;oBAChB,KAAK,WAAW;wBACd,OAAO,IAAI,uBAAc,CACvB,sBAAa,CAAC,iCAAiC,EAC/C,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAClC,CAAC;oBAEJ;wBACE,OAAO,IAAI,uBAAc,CAAC,IAAI,EAAE;4BAC9B,CAAC,CAAC,QAAQ;4BACV,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC;yBACpB,CAAC,CAAC;iBACN;YACH,CAAC,CAAC,CACH;iBACA,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;YAElC,MAAM,MAAM,CAAC;SACd;IACH,CAAC;CACF;AA7CD,gDA6CC","sourcesContent":["import {\r\n  ValidationError,\r\n  ValidationPipe,\r\n  ValidationPipeOptions,\r\n} from \"@nestjs/common\";\r\nimport { ErrorSubCodes, ForbiddenError } from \"../errors\";\r\n\r\nexport class DataValidationPipe extends ValidationPipe {\r\n  constructor(options?: ValidationPipeOptions) {\r\n    const valOptions = options || {};\r\n    if (!valOptions.exceptionFactory) {\r\n      valOptions.exceptionFactory = DataValidationPipe.defaultExceptionFactory;\r\n    }\r\n    if (valOptions.transform === undefined) {\r\n      valOptions.transform = true;\r\n    }\r\n    super(valOptions);\r\n  }\r\n\r\n  static defaultExceptionFactory(errors: ValidationError[]) {\r\n    if (errors && errors.length) {\r\n      const result = errors\r\n        .map((x) =>\r\n          Object.keys(x.constraints).map((type) => {\r\n            switch (type) {\r\n              case \"isDefined\":\r\n              case \"isNotEmpty\":\r\n                return new ForbiddenError(\r\n                  ErrorSubCodes.INVALID_INPUT_PARAMS_IS_REQUIRED,\r\n                  [x.property, x.constraints[type]],\r\n                );\r\n\r\n              case \"isString\":\r\n              case \"maxLength\":\r\n                return new ForbiddenError(\r\n                  ErrorSubCodes.INVALID_INPUT_PARAMS_IS_BAD_VALUE,\r\n                  [x.property, x.constraints[type]],\r\n                );\r\n\r\n              default:\r\n                return new ForbiddenError(type, [\r\n                  x.property,\r\n                  x.constraints[type],\r\n                ]);\r\n            }\r\n          }),\r\n        )\r\n        .reduce((p, c) => [...p, ...c]);\r\n\r\n      throw result;\r\n    }\r\n  }\r\n}\r\n"]}