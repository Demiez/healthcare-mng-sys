{"version":3,"file":"mongo-uuid.helper.js","sourceRoot":"","sources":["../../src/helpers/mongo-uuid.helper.ts"],"names":[],"mappings":";;;AAEA,MAAM,IAAI,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AACnC,MAAM,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AAI9B,MAAM,qBAAqB,GAAG,CAAC,UAAkB,EAAE,EAAE;IAC1D,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;AACxD,CAAC,CAAC;AAFW,QAAA,qBAAqB,yBAEhC;AAEK,MAAM,qBAAqB,GAAG,CAAC,UAAkB,EAAE,EAAE;IAC1D,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;QAClC,OAAO,UAAU,CAAC;KACnB;SAAM;QACL,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;KACnC;AACH,CAAC,CAAC;AANW,QAAA,qBAAqB,yBAMhC","sourcesContent":["import * as mongodb from \"mongodb\";\r\n\r\nconst UUID = require(\"mongo-uuid\");\r\nconst mongoose = require(\"mongoose\");\r\n\r\ntype typeId = mongodb.Binary | string;\r\n\r\nexport const convertStringToBinary = (uuidString: typeId) => {\r\n  return UUID(mongoose.Types.Buffer.Binary, uuidString);\r\n};\r\n\r\nexport const convertBinaryToString = (uuidBinary: typeId) => {\r\n  if (typeof uuidBinary === \"string\") {\r\n    return uuidBinary;\r\n  } else {\r\n    return UUID.stringify(uuidBinary);\r\n  }\r\n};\r\n"]}